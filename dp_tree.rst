Дп на поддеревьях
"""""""""""""""""


Задача о паросочетании максимального веса в дереве
""""""""""""""""""""""""""""""""""""""""""""""""""

`lol <https://neerc.ifmo.ru/wiki/index.php?title=%D0%94%D0%B8%D0%BD%D0%B0%D0%BC%D0%B8%D0%BA%D0%B0_%D0%BF%D0%BE_%D0%BF%D0%BE%D0%B4%D0%B4%D0%B5%D1%80%D0%B5%D0%B2%D1%8C%D1%8F%D0%BC>`_

Можно использовать динамическое программирование, время работы алгоритма с которым улучшается до :math:`O(n)`

Пусть задано взвешенное дерево, с весами, обозначенными как :math:`w_{i,j}`, где :math:`i` и :math:`j` — вершины дерева, соединённые ребром.. Необходимо составить такое паросочетание, чтобы суммарный вес всех рёбер, входящих в него, был максимальным.

Обозначим :math:`a[i]` как паросочетание максимального веса в поддереве с корнем в :math:`i`-той вершине, при этом :math:`i`-тая вершина соединена ребром, входящим в паросочетание, с вершиной, входящей в поддерево :math:`i`-ой вершины; аналогично :math:`b[i]` — как паросочетание максимального веса в поддерева с корнем в :math:`i`-той вершине, но только при этом :math:`i`-тая вершина соединена ребром, входящим в паросочетание, с вершиной, не входящей в поддерево :math:`i`-ой вершины; а :math:`c[i]=max(a[i],b[i])`, таким образом, ответ на задачу будет находиться в :math:`c[root]`, где :math:`root` — корень дерева. Идея динамического программирования здесь состоит в том, что для того, чтобы найти паросочетание максимального веса с корнем в вершине :math:`i`, нам необходимо найти максимальное паросочетание для всех поддеревьев :math:`i`-ой вершины.

